diff --git a/CODEOWNERS b/CODEOWNERS
new file mode 100644
index 0000000..9d6a666
--- /dev/null
+++ b/CODEOWNERS
@@ -0,0 +1,4 @@
+# See https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-code-owners
+
+backend/ @labiba-tasnim
+frontend/ @labiba-tasnim
diff --git a/backend/db/Connection.js b/backend/db/Connection.js
new file mode 100644
index 0000000..301569e
--- /dev/null
+++ b/backend/db/Connection.js
@@ -0,0 +1,14 @@
+const mongoose = require('mongoose');
+
+const schema = mongoose.Schema({
+  userA: {
+    type: mongoose.Schema.Types.ObjectId,
+    required: true,
+  },
+  userB: {
+    type: mongoose.Schema.Types.ObjectId,
+    required: true,
+  },
+});
+
+module.exports = mongoose.model('connections', schema);
diff --git a/backend/routes/apiRoutes.js b/backend/routes/apiRoutes.js
index 8772dc7..9a9d5c3 100644
--- a/backend/routes/apiRoutes.js
+++ b/backend/routes/apiRoutes.js
@@ -8,6 +8,7 @@ const JobApplicant = require("../db/JobApplicant");
 const Recruiter = require("../db/Recruiter");
 const Job = require("../db/Job");
 const Application = require("../db/Application");
+const Connection = require("../db/Connection");
 
 const router = express.Router();
 
@@ -492,6 +493,225 @@ router.get("/user", jwtAuth, (req, res) => {
     }
   });
 
+  // Connection
+  router.post('/user/me/connections/:id', jwtAuth, async (req, res) => {
+    const user = req.user;
+    const { id } = req.params;
+    const myId = user._id.toString();
+
+    if (myId === id) {
+      return res.status(400).send('Cannot connect with self');
+    }
+
+    const existingConnection = await Connection.findOne({ 
+      $or: [
+        { userA: id, userB: myId },
+        { userA: myId, userB: id }
+      ]
+    }).lean().exec();
+
+    if (existingConnection) {
+      return res.send(existingConnection);
+    }
+
+    const connection = new Connection({
+      userA: myId,
+      userB: id
+    });
+
+    await connection.save();
+
+    res.send(connection);
+  });
+
+  router.get('/user/me/connections', jwtAuth, async (req, res) => {
+    const user = req.user;
+    const myId = user._id.toString();
+    console.log('idsd', myId);
+
+    const results = await Connection.aggregate([
+      {
+        $match: {
+          $or: [
+            { userA: mongoose.Types.ObjectId(myId) },
+            { userB: mongoose.Types.ObjectId(myId) },
+          ],
+        },
+      },
+      {
+        $lookup: {
+          from: 'recruiterinfos',
+          let: { userA: '$userA', userB: '$userB' },
+          pipeline: [
+            {
+              $match: {
+                $expr: {
+                  $or: [
+                    { $eq: ['$userId', '$$userA'] },
+                    { $eq: ['$userId', '$$userB'] },
+                  ],
+                },
+              },
+            },
+          ],
+          as: 'recruiterConnection',
+        },
+      },
+      {
+        $lookup: {
+          from: 'jobapplicantinfos',
+          let: { userA: '$userA', userB: '$userB' },
+          pipeline: [
+            {
+              $match: {
+                $expr: {
+                  $or: [
+                    { $eq: ['$userId', '$$userA'] },
+                    { $eq: ['$userId', '$$userB'] },
+                  ],
+                },
+              },
+            },
+          ],
+          as: 'applicantConnection',
+        },
+      },
+      {
+        $lookup: {
+          from: 'userauths',
+          localField: 'userA',
+          foreignField: '_id',
+          as: 'userA',
+        },
+      },
+      {
+        $lookup: {
+          from: 'userauths',
+          localField: 'userB',
+          foreignField: '_id',
+          as: 'userB',
+        },
+      },
+      { $unwind: { path: '$userA', preserveNullAndEmptyArrays: true } },
+      { $unwind: { path: '$userB', preserveNullAndEmptyArrays: true } },
+      { $unwind: { path: '$recruiterConnection', preserveNullAndEmptyArrays: true } },
+      { $unwind: { path: '$applicantConnection', preserveNullAndEmptyArrays: true } },
+      {
+        $project: {
+          connection: {
+            $cond: {
+              if: { $eq: ['$userA._id', mongoose.Types.ObjectId(myId)] },
+              then: '$userB',
+              else: '$userA',
+            },
+          },
+          user: {
+            $cond: {
+              if: { $eq: ['$userA._id', mongoose.Types.ObjectId(myId)] },
+              then: '$userB',
+              else: '$userA',
+            },
+          },
+          recruiterConnection: 1,
+          applicantConnection: 1,
+        },
+      },
+      {
+        $project: {
+          connection: {
+            $cond: {
+              if: '$recruiterConnection',
+              then: '$recruiterConnection',
+              else: '$applicantConnection',
+            },
+          },
+          user: 1,
+        },
+      },
+      {
+        $match: {
+          'connection.userId': { $ne: mongoose.Types.ObjectId(myId) },
+        },
+      },
+    ]);
+    
+
+    res.send(results);
+  });
+
+  router.delete('/user/me/connections/:id', jwtAuth, async (req, res) => {
+    const myId = req.user._id;
+    const connId = req.params.id;
+
+    const op = await Connection.findOneAndDelete({
+      $or: [
+        { userA: myId, userB: connId },
+        { userA: connId, userB: myId },
+
+      ]
+    })
+
+    res.send({ op });
+  });
+
+
+
+  // Search
+  router.get('/search/user', jwtAuth, async (req, res) => {
+    const { query } = req.query;
+    const results = await User.aggregate([
+      {
+        $lookup: {
+          from: "recruiterinfos",
+          localField: "_id",
+          foreignField: "userId",
+          as: "recruiter",
+        },
+      },
+      {
+        $lookup: {
+          from: "jobapplicantinfos",
+          localField: "_id",
+          foreignField: "userId",
+          as: "applicant",
+        },
+      },
+      { $unwind: {
+        path: '$applicant',
+        preserveNullAndEmptyArrays: true,
+      }, },
+      { $unwind: {
+        path: '$recruiter',
+        preserveNullAndEmptyArrays: true,
+      }, },
+      {
+        $match: {
+          $or: [
+            { 'applicant.name': { $regex: new RegExp(query, 'i') } },
+            { 'recruiter.name': { $regex: new RegExp(query, 'i') } },
+          ],
+          _id: { $ne: req.user._id }
+        },
+      },
+      {
+        $project: {
+          _id: 1,
+          email: 1,
+          type: 1,
+          name: {
+            $cond: {
+              if: { $eq: ['$type', 'applicant'] },
+              then: '$applicant.name',
+              else: '$recruiter.name',
+            },
+          },
+        },
+      },
+    ]);
+
+    res.send({ results });
+  });
+
 
   // apply for a job [todo: test: done]
 
diff --git a/backend/server.js b/backend/server.js
index 56972ed..64b3077 100644
--- a/backend/server.js
+++ b/backend/server.js
@@ -7,7 +7,7 @@ const fs = require("fs");
 
 // MongoDB
 mongoose
-  .connect("mongodb+srv://nafisamehreen:XMsaoFen6QPokzeB@cluster1.2g8bkdr.mongodb.net/?retryWrites=true&w=majority", {
+  .connect("mongodb://localhost:27017/jobPortal", {
     useNewUrlParser: true,
     useUnifiedTopology: true,
     useCreateIndex: true,
diff --git a/frontend/src/App.js b/frontend/src/App.js
index 9a01b83..4290499 100644
--- a/frontend/src/App.js
+++ b/frontend/src/App.js
@@ -8,6 +8,7 @@ import Login from "./component/Login";
 import Logout from "./component/Logout";
 import Signup from "./component/Signup";
 import Home from "./component/Home";
+import Connections from "./component/Connections";
 import Notifications from "./component/Notifications";
 import Applications from "./component/Applications";
 import Profile from "./component/Profile";
@@ -23,7 +24,7 @@ const useStyles = makeStyles((theme) => ({
   body: {
     display: "flex",
     flexDirection: "column",
-    justifyContent: "center",
+    justifyContent: "flex-start",
     alignItems: "center",
     minHeight: "98vh",
     paddingTop: "64px",
@@ -65,6 +66,9 @@ function App() {
               <Route exact path="/home">
                 <Home />
               </Route>
+              <Route exact path="/connections">
+                <Connections />
+              </Route>
               <Route exact path="/applications">
                 <Applications />
               </Route>
diff --git a/frontend/src/component/Connections.js b/frontend/src/component/Connections.js
new file mode 100644
index 0000000..dcef7fb
--- /dev/null
+++ b/frontend/src/component/Connections.js
@@ -0,0 +1,126 @@
+import { useEffect, useState } from "react";
+import { Grid, Box, TextField, Button, Avatar } from "@material-ui/core";
+import apiList from "../lib/apiList";
+import axios from "axios";
+
+function Connections(props) {
+  const [searchInput, setSearchInput] = useState('');
+  const [searchResults, setSearchResults]  = useState(undefined);
+  const [connections, setConnections] = useState(undefined);
+
+  useEffect(() => {
+    fetchConnections();
+  }, []);
+
+  const handleSearch = async () => {
+    setSearchResults([]);
+    const params = {
+      query: searchInput
+    }
+    const headers = {
+      Authorization: `Bearer ${localStorage.getItem("token")}`,
+    }
+    const response = await axios.get(apiList.userSearch, { params, headers }).then(resp => resp.data.results);
+    if (!response.length) {
+      return setSearchResults(null)
+    }
+    setSearchResults(response.map(res => ({ ...res, added: false })));
+    console.log(response);
+  }
+
+  const handleConnectionAdd = async (conn) => {
+    const headers = {
+      Authorization: `Bearer ${localStorage.getItem("token")}`,
+    };
+    await axios.post(`${apiList.connection}/${conn._id}`, undefined, { headers });
+    let updatedSearchResults = searchResults.map(result => {
+      if (result._id === conn._id) {
+        result.added = true;
+      }
+      return result;
+    });
+    setSearchResults(updatedSearchResults);
+    fetchConnections();
+  };
+
+  const handleConnectionRemove = async (conn) => {
+    const headers = {
+      Authorization: `Bearer ${localStorage.getItem("token")}`,
+    };
+    await axios.delete(`${apiList.connection}/${conn.connection.userId}`, { headers });
+    fetchConnections();
+  }
+
+  const fetchConnections = async () => {
+    const headers = {
+      Authorization: `Bearer ${localStorage.getItem("token")}`,
+    };
+    const response = await axios.get(apiList.connection, { headers }).then(resp => resp.data);
+    if (!response.length) {
+      return setConnections(null);
+    } 
+    setConnections(response);
+  };
+
+  const renderSearchResults = () => {
+    if (searchResults === null) {
+      return <div>No results found</div>
+    }
+
+    if (searchResults === undefined) {
+      return null;
+    }
+
+    return searchResults.map(result => 
+      <Box key={result._id} display='flex' alignItems='center' justifyContent='space-between' flexDirection='row' margin='8px 0'>
+        <Box display='flex' flexDirection='row'>
+          <Avatar alt={result.name} style={{ marginRight: '10px', width: 34, height: 34 }} />
+          <div>{result.name}</div>
+        </Box>
+        <Button variant='contained' disabled={result.added} size="small" style={{ marginLeft: 10 }} onClick={() => handleConnectionAdd(result)}>{result.added ? 'Added' : 'Add'}</Button>
+      </Box>
+    );
+  }
+
+  const renderConnections = () => {
+    if (connections === null) {
+      return <div>No connections found</div>
+    }
+
+    if (connections === undefined) {
+      return null;
+    }
+
+    return connections.map(result => 
+      <Box key={result.connection._id} display='flex' alignItems='center' justifyContent='space-between' flexDirection='row' margin='8px 0'>
+        <Box display='flex' flexDirection='row'>
+          <Avatar alt={result.connection.name} style={{ marginRight: '10px', width: 34, height: 34 }} />
+          <div>{result.connection.name}</div>
+        </Box>
+        <Button variant='contained' disabled={result.added} size="small" style={{ marginLeft: 10, backgroundColor: 'orange', color: 'black' }} onClick={() => handleConnectionRemove(result)}>Remove</Button>
+      </Box>
+    );
+  }
+
+  return (
+      <Grid item container direction="row" style={{ width: '50%', display: 'flex', justifyContent: 'space-around'  }}>
+        <Box>
+          <h1>Search User</h1>
+          <Box display='flex' flexDirection='row' alignItems='center'>
+            <TextField label='Search' variant="outlined" value={searchInput} onChange={e => setSearchInput(e.target.value)} />
+            <Button style={{ marginLeft: '3px', backgroundColor: 'teal', color: 'white' }} variant="contained" onClick={handleSearch}>Search</Button>
+          </Box>
+          
+          <Box display='flex' flexDirection='column' margin='10px 0'>
+            {renderSearchResults()}
+          </Box>
+        </Box>
+        <Box>
+          <h1>My Connections</h1>
+          {renderConnections()}
+        </Box>
+      </Grid>
+  )
+}
+
+export default Connections;
diff --git a/frontend/src/component/Home.js b/frontend/src/component/Home.js
index cc43a09..c370ced 100644
--- a/frontend/src/component/Home.js
+++ b/frontend/src/component/Home.js
@@ -568,15 +568,10 @@ const Home = (props) => {
         },
       })
       .then((response) => {
-        console.log(response.data);
         setJobs((prevJobs) =>
           [
             ...prevJobs,
-            ...response.data.results.filter((obj) => {
-              const today = new Date();
-              const deadline = new Date(obj.deadline);
-              return deadline > today;
-            })
+            ...response.data.results
           ]
         );
 
@@ -661,6 +656,7 @@ const Home = (props) => {
           alignItems="stretch"
           justify="center"
         >
+          {console.log('jobsss', jobs)}
           {jobs.length > 0 ? (
             jobs.map((job) => {
               return <JobTile job={job} key={job._id} />;
diff --git a/frontend/src/component/Navbar.js b/frontend/src/component/Navbar.js
index 1c258b7..7f7c91b 100644
--- a/frontend/src/component/Navbar.js
+++ b/frontend/src/component/Navbar.js
@@ -55,6 +55,9 @@ const Navbar = (props) => {
               <Button color="inherit" onClick={() => handleClick("/employees")}>
                 Employees
               </Button>
+              <Button color="inherit" onClick={() => handleClick("/connections")}>
+                Connections
+              </Button>
               <Button color="inherit" onClick={() => handleClick("/profile")}>
                 Profile
               </Button>
@@ -76,6 +79,9 @@ const Navbar = (props) => {
               >
                 Applications
               </Button>
+              <Button color="inherit" onClick={() => handleClick("/connections")}>
+                Connections
+              </Button>
               <Button color="inherit" onClick={() => handleClick("/profile")}>
                 Profile
               </Button>
diff --git a/frontend/src/lib/apiList.js b/frontend/src/lib/apiList.js
index e5d9648..44c8eb5 100644
--- a/frontend/src/lib/apiList.js
+++ b/frontend/src/lib/apiList.js
@@ -9,6 +9,8 @@ const apiList = {
   applications: `${server}/api/applications`,
   user: `${server}/api/user`,
   applicants: `${server}/api/applicants`,
+  userSearch: `${server}/api/search/user`,
+  connection: `${server}/api/user/me/connections`
 };
 
 export default apiList;
